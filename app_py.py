# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zz13J7DGH8oOigICLSX3_-z1PO36NGa-
"""

!pip install streamlit

!pip install streamlit pyngrok

import warnings
warnings.filterwarnings("ignore")

# =========================================
# CUSTOMER PERSONALIZED OFFERS - STREAMLIT GUI (CLEAN VERSION)
# =========================================
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import warnings, logging

# 🔇 Suppress Streamlit runtime and logging warnings
warnings.filterwarnings("ignore")
logging.getLogger('streamlit.runtime.scriptrunner_utils').setLevel(logging.ERROR)

# Streamlit page config
st.set_page_config(page_title="Customer Personalized Offers", layout="wide")

# -------------------------
# 1️⃣ File Upload Section
# -------------------------
st.title("🛍️ Customer Personalized Offers Dashboard")
uploaded_file = st.file_uploader("📂 Upload your Excel or CSV file", type=["xlsx", "csv"])

if uploaded_file is not None:
    try:
        # Read file
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.success("✅ File uploaded successfully!")

        # Display small preview
        st.dataframe(df.head())

        # ============================
        # 2️⃣ Data Preparation
        # ============================
        df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], errors='coerce')
        df['TotalPrice'] = df['Quantity'] * df['Price']

        # RFM Table
        NOW = df['InvoiceDate'].max() + pd.Timedelta(days=1)
        rfm = df.groupby('Customer ID').agg({
            'InvoiceDate': lambda x: (NOW - x.max()).days,
            'Invoice': 'nunique',
            'TotalPrice': 'sum'
        }).reset_index()
        rfm.columns = ['Customer ID', 'Recency', 'Frequency', 'Monetary']

        # Show RFM Summary
        st.subheader("📊 RFM Summary")
        st.dataframe(rfm.head())

        # ============================
        # 3️⃣ Cluster Visualization
        # ============================
        st.subheader("🧭 Cluster Visualization (Example KMeans Placeholder)")
        st.info("You can later add your real clustering model here.")

        fig = px.scatter(
            rfm,
            x='Frequency',
            y='Monetary',
            size='Recency',
            hover_data=['Customer ID'],
            title="Frequency vs Monetary (Sample Visualization)"
        )
        st.plotly_chart(fig, use_container_width=True)

        # ============================
        # 4️⃣ Customer Search Section
        # ============================
        st.subheader("🔍 Customer Lookup")
        customer_id = st.text_input("Enter Customer ID")

        if customer_id:
            try:
                customer_id = int(customer_id)
                cust_data = df[df['Customer ID'] == customer_id]

                if not cust_data.empty:
                    st.write(f"### 🧾 Purchase Summary for Customer ID: {customer_id}")

                    # Column 1: All products bought
                    products_bought = cust_data['Description'].unique()

                    # Column 2: Frequent products
                    freq_table = (
                        cust_data.groupby('Description')['Quantity']
                        .sum()
                        .reset_index()
                        .sort_values(by='Quantity', ascending=False)
                    )

                    # Column 3: Stock info (placeholder)
                    stock_info = ["Not Available"] * len(freq_table)

                    # Column 4: Offer eligibility
                    freq_table['Offer'] = freq_table['Quantity'].apply(
                        lambda f: "🟢 Big Discount (20%)" if f >= 5 else
                                  "🟡 Medium Discount (10%)" if 3 <= f <= 4 else
                                  "🟠 Small Discount (5%)" if f == 2 else
                                  "🔴 No Offer (Watch)"
                    )

                    # Combine all
                    summary = pd.DataFrame({
                        "Product": freq_table['Description'],
                        "Frequency": freq_table['Quantity'],
                        "Stock Info": stock_info,
                        "Offer": freq_table['Offer']
                    })

                    st.dataframe(summary, use_container_width=True)

                else:
                    st.warning("⚠️ Customer ID not found.")
            except ValueError:
                st.error("❌ Please enter a valid numeric Customer ID.")
    except Exception as e:
        st.error(f"❌ Error: {e}")
else:
    st.info("👆 Please upload a dataset to begin.")